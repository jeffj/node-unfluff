// Generated by CoffeeScript 1.12.7
(function() {
  var cheerio, cleaner, extractor, getCleanedDoc, getParsedDoc, getTopNode, unfluff;

  cheerio = require("cheerio");

  extractor = require("./extractor");

  cleaner = require("./cleaner");

  module.exports = unfluff = function(html, language) {
    var doc, lng, pageData, topNode;
    doc = cheerio.load(html);
    lng = language || extractor.lang(doc);
    pageData = {
      title: extractor.title(doc),
      softTitle: extractor.softTitle(doc),
      date: extractor.date(doc),
      author: extractor.author(doc),
      publisher: extractor.publisher(doc),
      copyright: extractor.copyright(doc),
      favicon: extractor.favicon(doc),
      description: extractor.description(doc),
      keywords: extractor.keywords(doc),
      lang: lng,
      canonicalLink: extractor.canonicalLink(doc),
      tags: extractor.tags(doc),
      image: extractor.image(doc)
    };
    cleaner(doc);
    topNode = extractor.calculateBestNode(doc, lng);
    pageData.videos = extractor.videos(doc, topNode);
    pageData.links = extractor.links(doc, topNode, lng);
    pageData.text = extractor.text(doc, topNode, lng);
    pageData.html = extractor.html(doc, topNode, lng);
    return pageData;
  };

  unfluff.lazy = function(html, language) {
    return {
      title: function() {
        var doc;
        doc = getParsedDoc.call(this, html);
        return this.title_ != null ? this.title_ : this.title_ = extractor.title(doc);
      },
      softTitle: function() {
        var doc;
        doc = getParsedDoc.call(this, html);
        return this.softTitle_ != null ? this.softTitle_ : this.softTitle_ = extractor.softTitle(doc);
      },
      date: function() {
        var doc;
        doc = getParsedDoc.call(this, html);
        return this.date_ != null ? this.date_ : this.date_ = extractor.date(doc);
      },
      copyright: function() {
        var doc;
        doc = getParsedDoc.call(this, html);
        return this.copyright_ != null ? this.copyright_ : this.copyright_ = extractor.copyright(doc);
      },
      author: function() {
        var doc;
        doc = getParsedDoc.call(this, html);
        return this.author_ != null ? this.author_ : this.author_ = extractor.author(doc);
      },
      publisher: function() {
        var doc;
        doc = getParsedDoc.call(this, html);
        return this.publisher_ != null ? this.publisher_ : this.publisher_ = extractor.publisher(doc);
      },
      favicon: function() {
        var doc;
        doc = getParsedDoc.call(this, html);
        return this.favicon_ != null ? this.favicon_ : this.favicon_ = extractor.favicon(doc);
      },
      description: function() {
        var doc;
        doc = getParsedDoc.call(this, html);
        return this.description_ != null ? this.description_ : this.description_ = extractor.description(doc);
      },
      keywords: function() {
        var doc;
        doc = getParsedDoc.call(this, html);
        return this.keywords_ != null ? this.keywords_ : this.keywords_ = extractor.keywords(doc);
      },
      lang: function() {
        var doc;
        doc = getParsedDoc.call(this, html);
        return this.language_ != null ? this.language_ : this.language_ = language || extractor.lang(doc);
      },
      canonicalLink: function() {
        var doc;
        doc = getParsedDoc.call(this, html);
        return this.canonicalLink_ != null ? this.canonicalLink_ : this.canonicalLink_ = extractor.canonicalLink(doc);
      },
      tags: function() {
        var doc;
        doc = getParsedDoc.call(this, html);
        return this.tags_ != null ? this.tags_ : this.tags_ = extractor.tags(doc);
      },
      image: function() {
        var doc;
        doc = getParsedDoc.call(this, html);
        return this.image_ != null ? this.image_ : this.image_ = extractor.image(doc);
      },
      videos: function() {
        var doc, topNode;
        if (this.videos_ != null) {
          return this.videos_;
        }
        doc = getCleanedDoc.call(this, html);
        topNode = getTopNode.call(this, doc, this.lang());
        return this.videos_ = extractor.videos(doc, topNode);
      },
      text: function() {
        var doc, topNode;
        if (this.text_ != null) {
          return this.text_;
        }
        doc = getCleanedDoc.call(this, html);
        topNode = getTopNode.call(this, doc, this.lang());
        return this.text_ = extractor.text(doc, topNode, this.lang());
      },
      links: function() {
        var doc, topNode;
        if (this.links_ != null) {
          return this.links_;
        }
        doc = getCleanedDoc.call(this, html);
        topNode = getTopNode.call(this, doc, this.lang());
        return this.links_ = extractor.links(doc, topNode, this.lang());
      }
    };
  };

  getParsedDoc = function(html) {
    return this.doc_ != null ? this.doc_ : this.doc_ = cheerio.load(html);
  };

  getTopNode = function(doc, lng) {
    return this.topNode_ != null ? this.topNode_ : this.topNode_ = extractor.calculateBestNode(doc, lng);
  };

  getCleanedDoc = function(html) {
    var doc;
    if (this.cleanedDoc_ != null) {
      return this.cleanedDoc_;
    }
    doc = getParsedDoc.call(this, html);
    this.cleanedDoc_ = cleaner(doc);
    return this.cleanedDoc_;
  };

}).call(this);
